import 'package:flutter/foundation.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

import 'mcp_server_config.dart';
import 'mcp_client.dart';

/// Represents the result of processing a query through the MCP system
/// Contains both the initial model response, tool execution details, and final model response
@immutable
class McpProcessResult {
  /// The initial content generated by the model, which may include function calls
  final Content? modelCallContent;

  /// The content returned by the tool execution
  final Content? toolResponseContent;

  /// The final content generated by the model after tool execution
  /// If no tool was called, this will be the same as modelCallContent
  final Content finalModelContent;

  /// The name of the tool that was called, if any
  final String? toolName;

  /// The arguments passed to the tool when it was called
  final Map<String, dynamic>? toolArgs;

  /// The actual result string returned by the tool
  final String? toolResult;

  /// The ID of the server that processed the tool call
  final String? sourceServerId;

  const McpProcessResult({
    required this.finalModelContent,
    this.modelCallContent,
    this.toolResponseContent,
    this.toolName,
    this.toolArgs,
    this.toolResult,
    this.sourceServerId,
  });
}

/// Connection status for an MCP server
enum McpConnectionStatus {
  /// Server is not connected
  disconnected,

  /// Server is in the process of connecting
  connecting,

  /// Server is successfully connected
  connected,

  /// Error occurred during connection or operation
  error,
}

/// Immutable state for the MCP client provider
/// Contains server configurations, connection statuses, active clients, and error messages
@immutable
class McpClientState {
  /// List of server configurations from settings
  final List<McpServerConfig> serverConfigs;

  /// Map of server IDs to their connection status
  final Map<String, McpConnectionStatus> serverStatuses;

  /// Map of server IDs to their active client instances
  final Map<String, McpClient> activeClients;

  /// Map of server IDs to error messages (if in error state)
  final Map<String, String> serverErrorMessages;

  /// Creates a new McpClientState instance
  const McpClientState({
    this.serverConfigs = const [],
    this.serverStatuses = const {},
    this.activeClients = const {},
    this.serverErrorMessages = const {},
  });

  /// Whether any servers are currently connected
  bool get hasActiveConnections =>
      serverStatuses.values.any((s) => s == McpConnectionStatus.connected);

  /// Number of servers that are successfully connected
  int get connectedServerCount =>
      serverStatuses.values
          .where((s) => s == McpConnectionStatus.connected)
          .length;

  /// Create a copy of this state with the given fields replaced with new values
  McpClientState copyWith({
    List<McpServerConfig>? serverConfigs,
    Map<String, McpConnectionStatus>? serverStatuses,
    Map<String, McpClient>? activeClients,
    Map<String, String>? serverErrorMessages,
    List<String>? removeClientIds,
    List<String>? removeStatusIds,
    List<String>? removeErrorIds,
  }) {
    final newStatuses = Map<String, McpConnectionStatus>.from(
      serverStatuses ?? this.serverStatuses,
    );
    final newClients = Map<String, McpClient>.from(
      activeClients ?? this.activeClients,
    );
    final newErrors = Map<String, String>.from(
      serverErrorMessages ?? this.serverErrorMessages,
    );

    removeClientIds?.forEach(newClients.remove);
    removeStatusIds?.forEach(newStatuses.remove);
    removeErrorIds?.forEach(newErrors.remove);

    return McpClientState(
      serverConfigs: serverConfigs ?? this.serverConfigs,
      serverStatuses: newStatuses,
      activeClients: newClients,
      serverErrorMessages: newErrors,
    );
  }
}
